import psycopg


async def setup_user_table(db_url: str):
    # Connect to an existing database
    with psycopg.connect(db_url) as conn:
        # Open a cursor to perform database operations
        with conn.cursor() as cur:
            # Execute a command: this creates a new table
            cur.execute("""
                    CREATE TABLE user_table (
                        UserId BIGINT GENERATED BY DEFAULT AS IDENTITY (START WITH 1000) PRIMARY KEY,
                        username varchar(128) NOT NULL UNIQUE,
                        email varchar(256) NOT NULL UNIQUE,
                        pwd varchar(256) NOT NULL,
                        pwd_salt varchar(256),
                        token_salt uuid NOT NULL DEFAULT gen_random_uuid(),
                        disabled BOOLEAN DEFAULT false,
                        is_admin BOOLEAN DEFAULT false,
                        created_at timestamp with time zone NOT NULL,
                        updated_at timestamp with time zone NOT NULL)
                        IF NOT EXISTS:
                    """)
            conn.commit()


async def select_user_by_id(db_url: str, user_id: str) -> tuple:
    async with await psycopg.AsyncConnection.connect(db_url) as conn:
        async with conn.cursor() as cur:
            await cur.execute(
                """SELECT username, email FROM user_table WHERE id = %s""",
                user_id)
            user_data = await cur.fetchone()

    return user_data


async def select_user_by_username(db_url: str, username: str) -> tuple:
    async with await psycopg.AsyncConnection.connect(db_url) as conn:
        async with conn.cursor() as cur:
            await cur.execute(
                """SELECT UserId, email FROM user_table WHERE username = %s""",
                username)
            user_data = await cur.fetchone()

    return user_data


async def select_user_for_auth(db_url: str, user_id: str) -> tuple:
    async with await psycopg.AsyncConnection.connect(db_url) as conn:
        async with conn.cursor() as cur:
            await cur.execute(
                """SELECT username, pdw, pdw_salt, token_salt FROM user_table WHERE UserId = %s""",
                user_id)
            user_data = await cur.fetchone()

    return user_data


async def insert_user(db_url: str,
                      username: str,
                      email: str,
                      pwd: str,
                      pwd_salt: str,
                      token_salt: str,
                      is_admin: bool
                      ) -> bool:
    # Connect to an existing database
    async with await psycopg.AsyncConnection.connect(db_url) as conn:
        # Open a cursor to perform database operations
        async with conn.cursor() as cur:
            # Pass data to fill a query placeholders and let Psycopg perform
            # the correct conversion (no SQL injections!)
            await cur.execute(
                """INSERT INTO user_table (username,
                email,
                pwd,
                pwd_salt,
                token_salt,
                is_admin,
                created_at,
                updated_at) VALUES (
                %s, %s, %s, %s, %s, %s,
                CURRENT_TIMESTAMP, CURRENT_TIMESTAMP)""",
                (username, email, pwd, pwd_salt, token_salt, is_admin))
            # Make the changes to the database persistent
            await cur.commit()

            #await cur.execute(
            #    """SELECT id FROM user_table WHERE username = %s""",
            #    username)
            #return_username = await cur.fetchone()

    return True


async def update_username_by_id(db_url: str, user_id: str, username: str) -> bool:
    # Connect to an existing database
    async with await psycopg.AsyncConnection.connect(db_url) as conn:
        # Open a cursor to perform database operations
        async with conn.cursor() as cur:
            # Pass data to fill a query placeholders and let Psycopg perform
            # the correct conversion (no SQL injections!)
            cur.execute(
                """UPDATE user_table SET username=%s,
                 updated_at = current_timestamp WHERE UserId = %s""",
                (username, user_id))
            # Make the changes to the database persistent
            cur.commit()
    return True


async def delete_user_by_id(db_url: str, user_id: str):
    # Connect to an existing database
    async with await psycopg.AsyncConnection.connect(db_url) as conn:
        # Open a cursor to perform database operations
        async with conn.cursor() as cur:
            # Pass data to fill a query placeholders and let Psycopg perform
            # the correct conversion (no SQL injections!)
            cur.execute(
                """DELETE FROM user_table WHERE UserId = %s""",
                user_id)
            # Make the changes to the database persistent
            cur.commit()
    return True
