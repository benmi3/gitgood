use anyhow::{bail, Result};
use core::str;
use embedded_svc::{http::Method, io::Write};
use esp_idf_svc::hal::prelude::Peripherals;
use esp_idf_svc::{
    eventloop::EspSystemEventLoop,
    hal::{
        i2c::{I2cConfig, I2cDriver, I2cError},
        io::EspIOError,
        prelude::*,
    },
    http::server::{Configuration, EspHttpServer},
};
use shtcx::sensor_class::Sht2Gen;
use std;
mod error;
use log::info;
use rgb_led::{RGB8, WS2812RMT};
use shtcx::{self, shtc3, PowerMode, ShtC1, ShtCx};
use std::{
    sync::{Arc, Mutex},
    thread::sleep,
    time::Duration,
};
use wifi::wifi;

/// This configuration is picked up at compile time by `build.rs` from the
/// file `cfg.toml`.
#[toml_cfg::toml_config]
pub struct Config {
    #[default("Wokwi-GUEST")]
    wifi_ssid: &'static str,
    #[default("")]
    wifi_psk: &'static str,
}

fn main() -> Result<()> {
    // It is necessary to call this function once. Otherwise some patches to the runtime
    // implemented by esp-idf-sys might not link properly. See https://github.com/esp-rs/esp-idf-template/issues/71
    esp_idf_svc::sys::link_patches();

    // Bind the log crate to the ESP Logging facilities
    esp_idf_svc::log::EspLogger::initialize_default();

    log::info!("Hello, world!");
    let peripherals = Peripherals::take().unwrap();
    let sysloop = EspSystemEventLoop::take()?;

    info!("Hello, world!");

    // Start the LED off yellow
    let mut led = WS2812RMT::new(peripherals.pins.gpio2, peripherals.rmt.channel0)?;
    led.set_pixel(RGB8::new(50, 50, 0))?;

    // The constant `CONFIG` is auto-generated by `toml_config`.
    let app_config = CONFIG;

    // Connect to the Wi-Fi network
    let _wifi = match wifi(
        app_config.wifi_ssid,
        app_config.wifi_psk,
        peripherals.modem,
        sysloop,
    ) {
        Ok(inner) => inner,
        Err(err) => {
            // Red!
            led.set_pixel(RGB8::new(50, 0, 0))?;
            bail!("Could not connect to Wi-Fi network: {:?}", err)
        }
    };

    // Initialize temperature sensor
    let sda = peripherals.pins.gpio10;
    let scl = peripherals.pins.gpio8;
    let i2c = peripherals.i2c0;
    let config = I2cConfig::new().baudrate(100.kHz().into());
    let i2c = I2cDriver::new(i2c, sda, scl, &config)?;
    let temp_sensor_main = Arc::new(Mutex::new(shtc3(i2c)));
    let mut temp_sensor = temp_sensor_main.clone();
    temp_sensor
        .lock()
        .unwrap()
        .start_measurement(PowerMode::NormalMode)
        .unwrap();

    // 1.Create a `EspHttpServer` instance using a default configuration
    // let mut server = EspHttpServer::new(...)?;

    // 2. Write a handler that returns the index page
    // server.fn_handler("/", Method::Get, |request| {
    // ...
    //})?;
    // Set the HTTP server
    let mut server = EspHttpServer::new(&Configuration::default())?;
    // http://<sta ip>/ handler
    server.fn_handler(
        "/",
        Method::Get,
        |request| -> core::result::Result<(), EspIOError> {
            let html = index_html();
            let mut response = request.into_ok_response()?;
            response.write_all(html.as_bytes())?;
            Ok(())
        },
    )?;

    // http://<sta ip>/temperature handler
    server.fn_handler(
        "/temperature",
        Method::Get,
        move |request| -> core::result::Result<(), EspIOError> {
            let temp_val = temp_sensor
                .lock()
                .unwrap()
                .get_measurement_result()
                .unwrap()
                .temperature
                .as_degrees_celsius();
            let html = temperature(temp_val);
            let mut response = request.into_ok_response()?;
            response.write_all(html.as_bytes())?;
            Ok(())
        },
    )?;

    // This is not true until you actually create one
    println!("Server awaiting connection");

    // Prevent program from exiting
    loop {
        check_temp(&mut temp_sensor_main);
        sleep(Duration::from_millis(1000));
    }
}

fn check_temp_org(temp_sensor_main: &Arc<Mutex<ShtCx<Sht2Gen, I2cDriver<'_>>>>) {
    temp_sensor_main
        .lock()
        .map_err(|_| "locking mutex failed")?
        .start_measurement(PowerMode::NormalMode)
        .map_err(|_| "locking mutex failed")?
}

fn check_temp(
    temp_sensor_main: &mut Arc<Mutex<ShtCx<Sht2Gen, I2cDriver<'_>>>>,
) -> Result<(), Box<dyn std::error::Error>> {
    /*temp_sensor_main
    .lock()
    .unwrap()
    .start_measurement(PowerMode::NormalMode)
    .unwrap();*/
    let mut temp_sensor_main = temp_sensor_main.lock().map_err(|e| {
        eprintln!("Error locking temp_sensor_main: {}", e);
        e
    })?;

    Ok(get_temp(temp_sensor_main)?)
}

fn get_temp(
    mut temp_sensor_main: std::sync::MutexGuard<'_, ShtCx<Sht2Gen, I2cDriver<'_>>>,
) -> Result<(), shtcx::Error<I2cError>> {
    let return_string = match temp_sensor_main
        .start_measurement(PowerMode::NormalMode)
        .map_err(|e| {
            eprintln!("Error starting measurement: {}", e);
            e
        }) {
        Ok(it) => return Ok(it),
        Err(err) => return Err(err),
    };
}

fn templated(content: impl AsRef<str>) -> String {
    format!(
        r#"
<!DOCTYPE html>
<html>
    <head>
        <meta charset="utf-8">
        <title>esp-rs web server</title>
    </head>
    <body>
        {}
    </body>
</html>
"#,
        content.as_ref()
    )
}

fn index_html() -> String {
    templated("Hello from mcu!")
}

fn temperature(val: f32) -> String {
    templated(format!("chip temperature: {:.2}Â°C", val))
}
